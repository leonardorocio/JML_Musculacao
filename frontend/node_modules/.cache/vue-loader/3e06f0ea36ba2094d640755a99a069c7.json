{"remainingRequest":"C:\\Users\\leona\\Documents\\Docs1\\JML_Musculacao\\JML_Musculacao\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\leona\\Documents\\Docs1\\JML_Musculacao\\JML_Musculacao\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\leona\\Documents\\Docs1\\JML_Musculacao\\JML_Musculacao\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\leona\\Documents\\Docs1\\JML_Musculacao\\JML_Musculacao\\frontend\\src\\views\\About.vue?vue&type=template&id=039c5b43&","dependencies":[{"path":"C:\\Users\\leona\\Documents\\Docs1\\JML_Musculacao\\JML_Musculacao\\frontend\\src\\views\\About.vue","mtime":1633702740457},{"path":"C:\\Users\\leona\\Documents\\Docs1\\JML_Musculacao\\JML_Musculacao\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\leona\\Documents\\Docs1\\JML_Musculacao\\JML_Musculacao\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\leona\\Documents\\Docs1\\JML_Musculacao\\JML_Musculacao\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\leona\\Documents\\Docs1\\JML_Musculacao\\JML_Musculacao\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}